1
00:00:00,240 --> 00:00:07,600
嗨大家好，歡迎來到入門 Python 教學，本系列特別專注於影像處理。在這段影片中，我們將..

2
00:00:07,600 --> 00:00:13,200
使用我們在之前的視頻中開發的單元來執行二元語義分割

3
00:00:13,200 --> 00:00:16,480
如果你還沒看過那個視頻，我強烈建議你去看一下

4
00:00:16,480 --> 00:00:22,800
因為我們將使用完全相同的單元，這個單元是使用編碼器區塊的函數構建的

5
00:00:22,800 --> 00:00:23,840
和解碼區塊

6
00:00:23,840 --> 00:00:25,279
在上一個視頻中可以

7
00:00:25,279 --> 00:00:28,080
然後我們將執行二元語義分割

8
00:00:28,080 --> 00:00:32,159
那麼我們所說的二進位語意分割是什麼呢？我想這很清楚

9
00:00:32,159 --> 00:00:36,719
但如果不清楚，我們假設你有一張圖片在左側，物體

10
00:00:36,719 --> 00:00:39,200
是要分割線粒體

11
00:00:39,200 --> 00:00:41,040
背景之外

12
00:00:41,040 --> 00:00:42,320
這個繁忙的背景之外

13
00:00:42,320 --> 00:00:43,440
這就是二進位

14
00:00:43,440 --> 00:00:47,360
因為只有兩件事我在乎，一個是背景

15
00:00:47,360 --> 00:00:49,440
另一個是線粒體

16
00:00:49,440 --> 00:00:52,160
我只希望這兩件事能分開

17
00:00:52,160 --> 00:00:54,960
事實上，我只希望線粒體能夠分開

18
00:00:54,960 --> 00:00:58,079
所以二元問題實際上是

19
00:00:58,079 --> 00:00:58,960
一個問題

20
00:00:58,960 --> 00:00:59,359
哪裡

21
00:00:59,359 --> 00:01:03,280
你專注於一種單一類型的物件

22
00:01:03,280 --> 00:01:04,720
二進位給人一種印象

23
00:01:04,720 --> 00:01:08,880
好的，你需要兩個不同的東西，但二進位制基本上是你需要一個輸出

24
00:01:08,880 --> 00:01:13,520
一個像素屬於線粒體像素的概率是多少

25
00:01:13,520 --> 00:01:14,400
或

26
00:01:14,400 --> 00:01:17,600
它屬於背景，所以你需要一個輸出

27
00:01:17,600 --> 00:01:20,400
如果該輸出顯示為 0.1

28
00:01:20,400 --> 00:01:22,720
然後我將設置一個閾值為 0.5

29
00:01:22,720 --> 00:01:24,159
並說它低於 0.5

30
00:01:24,159 --> 00:01:25,600
所以它必須是背景

31
00:01:25,600 --> 00:01:29,759
如果超過 0.5，那一定是線粒體，就是這麼簡單

32
00:01:29,759 --> 00:01:30,240
好的

33
00:01:30,240 --> 00:01:32,560
所以這就是所謂的二進位語意分割

34
00:01:32,560 --> 00:01:36,720
這就是我們如何建立一個單位

35
00:01:36,720 --> 00:01:42,399
我們在這裡討論的是，你看到的是 con 2d 的輸出層

36
00:01:42,399 --> 00:01:46,720
你在這裡有一個，這就是我們實際獲得的輸出

37
00:01:46,720 --> 00:01:48,399
這就是二元的

38
00:01:48,399 --> 00:01:52,399
分割基本上意味著你有一個輸出就在那裡

39
00:01:52,399 --> 00:01:52,960
好的

40
00:01:52,960 --> 00:01:53,439
和

41
00:01:53,439 --> 00:01:58,159
哦，對不起，我應該提到這一點，我們使用的是 sigmoid 激活函數

42
00:01:58,159 --> 00:02:00,799
那什麼是 sigmoid？回到視頻中

43
00:02:00,799 --> 00:02:03,360
我在其中講過這個，但簡單解釋一下

44
00:02:03,360 --> 00:02:09,280
這是一個介於零和一之間的東西，可以把它想像成一種機率

45
00:02:09,280 --> 00:02:10,720
使用 Sigmoid 函數

46
00:02:10,720 --> 00:02:11,680
你會得到一個概率

47
00:02:11,680 --> 00:02:14,160
就在那時，你可以設定一個閾值

48
00:02:14,160 --> 00:02:16,879
說如果概率低於 0.5

49
00:02:16,879 --> 00:02:19,360
如果它高於 0.5，我會稱之為背景

50
00:02:19,360 --> 00:02:21,040
這再次是我的線粒體

51
00:02:21,040 --> 00:02:22,800
再次，我知道我在重複某些事情

52
00:02:22,800 --> 00:02:27,040
但這些在涉及到

53
00:02:27,040 --> 00:02:28,720
你知道這個話題現在

54
00:02:28,720 --> 00:02:29,920
好的，我們開始進入代碼部分

55
00:02:29,920 --> 00:02:32,720
現在讓這變得有點有趣

56
00:02:32,720 --> 00:02:33,360
一如既往

57
00:02:33,360 --> 00:02:35,200
我會分享程式碼

58
00:02:35,200 --> 00:02:39,120
所以再一次，請專注於我在這裡嘗試做的事情

59
00:02:39,120 --> 00:02:42,400
所以在 Google Colab 中，第一步你可以做任何事

60
00:02:42,400 --> 00:02:44,480
我正在您的本地電腦上顯示

61
00:02:44,480 --> 00:02:44,800
但

62
00:02:44,800 --> 00:02:47,440
如果你有好的 GPU，就是那種你知道的

63
00:02:47,440 --> 00:02:50,400
一切安裝順利，否則嘗試使用 Colab

64
00:02:50,400 --> 00:02:52,480
因為您不需要擔心

65
00:02:52,480 --> 00:02:53,519
安裝 GPU

66
00:02:53,519 --> 00:02:57,200
然後首先更改運行時類型，它已經是 GPU

67
00:02:57,200 --> 00:02:58,480
所以我沒問題

68
00:02:58,480 --> 00:03:00,000
並讓我繼續連接

69
00:03:00,000 --> 00:03:04,159
並且它只允許您一次只使用一個 GPU

70
00:03:04,159 --> 00:03:07,040
您不能在多個 Colab 帳戶上運行

71
00:03:07,040 --> 00:03:08,640
你知道使用多個 GPU

72
00:03:08,640 --> 00:03:09,920
所以

73
00:03:09,920 --> 00:03:11,599
要注意這點

74
00:03:11,599 --> 00:03:16,000
和你本地電腦一樣，如果你的 GPU 已經忙於處理

75
00:03:16,000 --> 00:03:18,879
訓練模型不像你可以，你可以

76
00:03:18,879 --> 00:03:24,159
編程它去做其他任務，那你的效率就會大幅下降，基本上是類似的

77
00:03:24,159 --> 00:03:24,560
好的

78
00:03:24,560 --> 00:03:25,280
現在

79
00:03:25,280 --> 00:03:25,920
什麼數據

80
00:03:25,920 --> 00:03:27,200
我將要使用

81
00:03:27,200 --> 00:03:28,879
這裡的數據

82
00:03:28,879 --> 00:03:31,120
請點擊這個鏈接，我會分享這個

83
00:03:31,120 --> 00:03:35,599
這會帶你到一個看起來像這樣的頁面，這是電子顯微鏡數據集

84
00:03:35,599 --> 00:03:39,680
他們擁有原始圖像

85
00:03:39,680 --> 00:03:41,120
以及標籤

86
00:03:41,120 --> 00:03:44,720
然後繼續下載它 下載

87
00:03:44,720 --> 00:03:46,879
是的，每一個這些子卷

88
00:03:46,879 --> 00:03:49,920
而我只處理第一個

89
00:03:49,920 --> 00:03:52,000
並且我拍攝了這些圖片

90
00:03:52,000 --> 00:03:53,519
和面具

91
00:03:53,519 --> 00:03:57,760
我已經將它們裁剪成

92
00:03:57,760 --> 00:03:58,560
成為

93
00:03:58,560 --> 00:04:00,480
讓我們看看我在這裡做了什麼

94
00:04:00,480 --> 00:04:02,799
轉換為 256 x 256 的大小。

95
00:04:02,799 --> 00:04:07,920
我實際上將這些圖片裁剪成 256x256

96
00:04:07,920 --> 00:04:12,000
如果你問我怎麼做的，我一直在講解 patchify

97
00:04:12,000 --> 00:04:14,000
和 unpatchify 已經有一段時間了，對吧

98
00:04:14,000 --> 00:04:16,720
我的意思是使用名為 patchify 的函式庫

99
00:04:16,720 --> 00:04:19,680
這可以實際從你的圖像中生成區塊

100
00:04:19,680 --> 00:04:23,680
然後只需寫幾行代碼將這些圖像保存為 JPEG 格式

101
00:04:23,680 --> 00:04:26,160
將提示或提示保存到本地磁碟

102
00:04:26,160 --> 00:04:26,639
如果你

103
00:04:26,639 --> 00:04:27,919
如果你想，你可以編寫那段代碼

104
00:04:27,919 --> 00:04:32,880
我的意思是這並不難對吧？我的意思是你加載一個任意大小的 numpy 陣列

105
00:04:32,880 --> 00:04:37,040
然後你說我想把這個分成 256 x 256 的區塊。

106
00:04:37,040 --> 00:04:41,199
所以繼續，每次在 x 和 y 方向上取 256。

107
00:04:41,199 --> 00:04:44,880
然後就保存到你的硬碟，別忘了完全按照步驟做。

108
00:04:44,880 --> 00:04:46,800
與你的遮罩相同

109
00:04:46,800 --> 00:04:48,160
因此你的輸入影像

110
00:04:48,160 --> 00:04:51,919
和遮罩明顯地匹配在一起，你不希望出現不匹配的情況

111
00:04:51,919 --> 00:04:52,560
好的

112
00:04:52,560 --> 00:04:55,440
所以我

113
00:04:55,440 --> 00:04:57,520
我相信在這種情況下我使用了 patchify

114
00:04:57,520 --> 00:05:00,479
然後我說，好吧，這是我的大圖像，進行切片

115
00:05:00,479 --> 00:05:04,639
所以如果我的圖像是 7，我不知道 512 乘 512，那麼

116
00:05:04,639 --> 00:05:07,280
如果我將其切割成 256，那麼我將得到

117
00:05:07,280 --> 00:05:11,919
2 乘 2 乘 256 乘 256，對吧

118
00:05:11,919 --> 00:05:13,280
希望這樣能說明清楚

119
00:05:13,280 --> 00:05:13,600
好的

120
00:05:13,600 --> 00:05:17,440
所以 5 12 在 x 5 12 在 y，所以是 2 乘 2

121
00:05:17,440 --> 00:05:19,280
我保存了這四個

122
00:05:19,280 --> 00:05:23,120
將我的 5 12 乘以 5 12 的四個補丁轉移到我的本地驅動器上

123
00:05:23,120 --> 00:05:24,880
然後我對我的面具做了相同的操作

124
00:05:24,880 --> 00:05:28,960
所以這就是我如何從這裡獲得我的數據集

125
00:05:28,960 --> 00:05:33,520
現在我有了我的 256 x 256，讓我們繼續

126
00:05:33,520 --> 00:05:34,560
並開始工作

127
00:05:34,560 --> 00:05:39,199
好的，讓我們導入所需的庫

128
00:05:39,199 --> 00:05:41,840
我不認為我在使用 normalize

129
00:05:41,840 --> 00:05:43,680
有些這些你會發現

130
00:05:43,680 --> 00:05:44,479
我並沒有使用

131
00:05:44,479 --> 00:05:47,199
它們，但它們是剩下的

132
00:05:47,199 --> 00:05:49,280
從我之前的實驗中

133
00:05:49,280 --> 00:05:52,560
但我傾向於保留它們，以防你想使用 normalize

134
00:05:52,560 --> 00:05:54,800
在你知道如何縮放你的影像時

135
00:05:54,800 --> 00:05:56,319
嗯，我就這樣留著吧

136
00:05:56,319 --> 00:06:00,400
好的，讓我們來檢查這些檔案 opencv

137
00:06:00,400 --> 00:06:01,759
使用 pillow 來調整圖像大小

138
00:06:01,759 --> 00:06:03,440
如果你需要

139
00:06:03,440 --> 00:06:05,520
numpy 陣列

140
00:06:05,520 --> 00:06:10,639
顯然這就是我們正在使用的 piplot，我也留了這個 min max scaler

141
00:06:10,639 --> 00:06:14,000
如果你想用這個來縮放圖像而不是標準化

142
00:06:14,000 --> 00:06:14,960
這取決於你

143
00:06:14,960 --> 00:06:17,280
而從優化器中我正在導入 atoms

144
00:06:17,280 --> 00:06:19,520
所以我們可以把它當作優化器來使用

145
00:06:19,520 --> 00:06:20,800
我正在使用 glob

146
00:06:20,800 --> 00:06:22,319
這樣我們就可以遍歷檔案

147
00:06:22,319 --> 00:06:25,840
好的，請原諒我

148
00:06:25,840 --> 00:06:28,560
現在我正在定義我的影像和遮罩目錄

149
00:06:28,560 --> 00:06:33,039
我已經，讓我檢查，我已經連接了我的驅動器，就在那裡，Google Drive

150
00:06:33,039 --> 00:06:36,560
然後我所做的就是去我的數據所在的地方

151
00:06:36,560 --> 00:06:37,440
然後只需

152
00:06:37,440 --> 00:06:40,400
然後只需複製此路徑

153
00:06:40,400 --> 00:06:41,360
是的，這正是

154
00:06:41,360 --> 00:06:42,560
我所做的

155
00:06:42,560 --> 00:06:45,840
這是我的圖片路徑，這是我的遮罩路徑

156
00:06:45,840 --> 00:06:49,199
所以這只是定義目錄，接下來我會定義大小

157
00:06:49,199 --> 00:06:50,240
和圖片數量

158
00:06:50,240 --> 00:06:52,479
我想合作的是因為這次我分開

159
00:06:52,479 --> 00:06:56,960
我想我最終得到了大約 1600 張圖片

160
00:06:56,960 --> 00:06:59,360
然後訓練變得有點慢

161
00:06:59,360 --> 00:07:04,000
當然，我建議你使用全部 1600 張圖片。就我而言，我只

162
00:07:04,000 --> 00:07:06,160
選擇使用，我不知道，500 張圖片

163
00:07:06,160 --> 00:07:06,960
或 1000 張

164
00:07:06,960 --> 00:07:08,560
然後我停在了一千

165
00:07:08,560 --> 00:07:10,319
因為我得到了不錯的結果

166
00:07:10,319 --> 00:07:13,440
所以我們繼續，這些只是變數對吧

167
00:07:13,440 --> 00:07:15,199
所以現在我們需要定義

168
00:07:15,199 --> 00:07:16,560
我的圖像名稱

169
00:07:16,560 --> 00:07:18,960
你如何定義你的圖像名稱

170
00:07:18,960 --> 00:07:21,280
好吧，首先為什麼我

171
00:07:21,280 --> 00:07:25,199
定義圖像名稱，而不僅僅是從磁碟中加載圖像

172
00:07:25,199 --> 00:07:32,880
問題在於這是另一個重要的建議

173
00:07:32,880 --> 00:07:35,919
在您花費大量時間加載圖像之前

174
00:07:35,919 --> 00:07:40,000
就直接一個接一個地載入，就像寫一個 for 迴圈一樣

175
00:07:40,000 --> 00:07:40,479
好的

176
00:07:40,479 --> 00:07:44,240
然後從特定磁碟中一個接一個地加載

177
00:07:44,240 --> 00:07:47,680
問題是，在 Windows 上它可能運作良好

178
00:07:47,680 --> 00:07:50,639
因為 Windows 可能會根據這些數字進行整理

179
00:07:50,639 --> 00:07:51,360
或其他什麼

180
00:07:51,360 --> 00:07:54,240
但在 Linux 上肯定會是這樣

181
00:07:54,240 --> 00:07:57,520
如果你這麼做，它很可能

182
00:07:57,520 --> 00:08:03,199
你的圖片會根據它被加入到硬碟的時間來排序

183
00:08:03,199 --> 00:08:06,000
然後當你載入你的圖片時

184
00:08:06,000 --> 00:08:08,319
而且你的遮罩會對不上

185
00:08:08,319 --> 00:08:11,840
因為當你加載第一張圖片為 500 多時

186
00:08:11,840 --> 00:08:14,879
但是第一個遮罩有 100 多，他們對不齊

187
00:08:14,879 --> 00:08:17,440
所以我們需要根據名稱對圖片進行排序

188
00:08:17,440 --> 00:08:20,560
或任何我們需要排序的標準

189
00:08:20,560 --> 00:08:21,360
兩張圖片

190
00:08:21,360 --> 00:08:23,039
和面具，假設你的面具

191
00:08:23,039 --> 00:08:26,960
和圖片有類似的名稱，例如如果我的圖片是 image 121

192
00:08:26,960 --> 00:08:32,000
我的面具將會是 mask 121，對吧？這是處理你的圖片和面具的最佳方式

193
00:08:32,000 --> 00:08:34,399
和面具，我希望這樣解釋清楚了

194
00:08:34,399 --> 00:08:38,320
所以要整理我的圖片

195
00:08:38,320 --> 00:08:40,880
首先讓我獲取圖片的名稱

196
00:08:40,880 --> 00:08:41,360
然後

197
00:08:41,360 --> 00:08:42,159
我會進行排序

198
00:08:42,159 --> 00:08:42,640
好的

199
00:08:42,640 --> 00:08:45,360
所以首先我們來查看一下

200
00:08:45,360 --> 00:08:49,360
glob dot glob 這會顯示檔案的名稱

201
00:08:49,360 --> 00:08:51,120
所有具有 TIFF 擴展名的文件

202
00:08:51,120 --> 00:08:52,720
所以讓我們繼續載入它

203
00:08:52,720 --> 00:08:55,760
並列印名稱，讓我們繼續這樣做

204
00:08:55,760 --> 00:08:59,600
所以它正在載入，正在讀取所有檔案以獲取名稱

205
00:08:59,600 --> 00:09:02,320
只是列印名稱

206
00:09:02,320 --> 00:09:03,680
我只是想給你看看

207
00:09:03,680 --> 00:09:10,640
這些名稱如何是隨機的，你看我的第一張圖片是 602.tiff

208
00:09:10,640 --> 00:09:14,320
我的下一張圖片如果我往右移動到那裡

209
00:09:14,320 --> 00:09:15,760
是 601.f

210
00:09:15,760 --> 00:09:17,279
然後是 600.f

211
00:09:17,279 --> 00:09:19,519
所有 fsn604.tiff

212
00:09:19,519 --> 00:09:20,399
如果我離開

213
00:09:20,399 --> 00:09:23,600
這不是，這不是在六四十八的順序，如果我來這裡

214
00:09:23,600 --> 00:09:26,640
我有一一六七一一七二

215
00:09:26,640 --> 00:09:29,040
完全不同的一些隨機順序

216
00:09:29,040 --> 00:09:30,560
所以我想要這些被排序

217
00:09:30,560 --> 00:09:31,760
我該怎麼做

218
00:09:31,760 --> 00:09:33,680
所以我拿我的圖像名稱

219
00:09:33,680 --> 00:09:35,680
然後我只是做點排序

220
00:09:35,680 --> 00:09:37,200
現在我們來打印它

221
00:09:37,200 --> 00:09:40,080
你會看到圖像 0

222
00:09:40,080 --> 00:09:42,959
希望它應該是圖像 1 圖像 2

223
00:09:42,959 --> 00:09:46,399
所以我的意思是 1 之後是從 10 開始的

224
00:09:46,399 --> 00:09:48,000
然後是 11

225
00:09:48,000 --> 00:09:50,399
或 100

226
00:09:50,399 --> 00:09:54,320
一千，從這個開始，很明顯首先查看這個

227
00:09:54,320 --> 00:09:54,800
好的

228
00:09:54,800 --> 00:09:57,120
然後它會到達兩個，我打賭

229
00:09:57,120 --> 00:09:57,760
所以

230
00:09:57,760 --> 00:10:00,560
然後一千二，一千三，一千四

231
00:10:00,560 --> 00:10:01,839
然後它會跳過

232
00:10:01,839 --> 00:10:06,079
所以這有一個特定的順序，這就是我想說的全部

233
00:10:06,079 --> 00:10:12,240
所以這些圖像中，我只會取前 1000 張，我有 1600 張

234
00:10:12,240 --> 00:10:12,640
或其他什麼

235
00:10:12,640 --> 00:10:15,519
所以讓我再拍攝 1,000 張圖片，為什麼

236
00:10:15,519 --> 00:10:19,680
因為我希望我的訓練能稍微快一點，這是可選的

237
00:10:19,680 --> 00:10:21,360
好的，一旦我做到這點

238
00:10:21,360 --> 00:10:24,000
現在是閱讀圖像的時候

239
00:10:24,000 --> 00:10:28,320
到目前為止，我有影像名稱，但在陣列中沒有影像

240
00:10:28,320 --> 00:10:33,360
所以目前我要讀取的方式，你也可以使用數據生成器

241
00:10:33,360 --> 00:10:37,440
所以你會批次讀取影像，我們將來會做一個相關的視頻

242
00:10:37,440 --> 00:10:40,560
但現在我們將所有一千張圖像載入記憶體中

243
00:10:40,560 --> 00:10:42,000
然後進行訓練

244
00:10:42,000 --> 00:10:42,399
好的

245
00:10:42,399 --> 00:10:45,519
我們怎麼做到這一點

246
00:10:45,519 --> 00:10:52,480
對於列表推導式，就像你知道的，對於這些圖像名稱子集中的每個圖像

247
00:10:52,480 --> 00:10:58,000
就在那裡，對於這些圖像中的每一個，繼續使用 cv2.imread

248
00:10:58,000 --> 00:10:59,680
以及每個影像

249
00:10:59,680 --> 00:11:02,800
然後將其讀取為一個正確的灰階影像

250
00:11:02,800 --> 00:11:05,200
這行正在做的事情，這會非常慢

251
00:11:05,200 --> 00:11:07,920
因為現在它正在讀取 1000 張圖像

252
00:11:07,920 --> 00:11:08,720
好的

253
00:11:08,720 --> 00:11:10,800
當它在執行這個操作時，讓我們繼續前進

254
00:11:10,800 --> 00:11:16,640
並查看面具部分，我對面具做了完全相同的操作，我正在讀取

255
00:11:16,640 --> 00:11:18,399
所有的遮罩名稱

256
00:11:18,399 --> 00:11:19,839
你看到 glob 點 glob

257
00:11:19,839 --> 00:11:21,440
然後我正在整理它們

258
00:11:21,440 --> 00:11:23,760
這一步非常重要

259
00:11:23,760 --> 00:11:25,360
如果你想要這些影像

260
00:11:25,360 --> 00:11:28,160
和面具以完全相同的方式進行排序

261
00:11:28,160 --> 00:11:29,040
所以你的影像

262
00:11:29,040 --> 00:11:31,680
和遮罩會排列整齊

263
00:11:31,680 --> 00:11:36,800
好的，再說一次，當事情不如預期時，你會失去理智

264
00:11:36,800 --> 00:11:40,480
而且要花很長時間才能弄清楚到底為什麼

265
00:11:40,480 --> 00:11:41,120
好的

266
00:11:41,120 --> 00:11:46,399
然後來到面罩名稱零到一千，這就是我們已經完成的

267
00:11:46,399 --> 00:11:48,240
然後是 cb2.imread

268
00:11:48,240 --> 00:11:54,320
所以這些步驟與我對我的圖像所做的完全相同，對吧

269
00:11:54,320 --> 00:11:56,320
除非我把所有東西都放在一個區塊中

270
00:11:56,320 --> 00:11:58,480
所以一旦圖像變紅

271
00:11:58,480 --> 00:12:00,399
這將是一個列表

272
00:12:00,399 --> 00:12:03,760
這些是影像的列表，我將它們轉換為 numpy 陣列

273
00:12:03,760 --> 00:12:05,519
然後我擴展維度

274
00:12:05,519 --> 00:12:08,399
使它們處於正確的格式

275
00:12:08,399 --> 00:12:10,720
用於我的神經網絡

276
00:12:10,720 --> 00:12:11,120
好的

277
00:12:11,120 --> 00:12:14,000
所以這就是我們在這裡嘗試做的事情

278
00:12:14,000 --> 00:12:16,399
我的遮罩也是一樣

279
00:12:16,399 --> 00:12:19,839
然後我將在這裡列印出形狀

280
00:12:19,839 --> 00:12:20,480
所以

281
00:12:20,480 --> 00:12:24,240
我會再說一次，我不確定這還要花多久時間

282
00:12:24,240 --> 00:12:27,440
那我現在暫停這段影片

283
00:12:27,440 --> 00:12:32,079
等我們準備好影像後再繼續

284
00:12:32,079 --> 00:12:34,399
好的，已經過了三到四分鐘

285
00:12:34,399 --> 00:12:35,920
這個還在載入中

286
00:12:35,920 --> 00:12:39,200
所以我們來停止它，因為我已經訓練好了模型

287
00:12:39,200 --> 00:12:41,839
所以讓我把這個改成 100 張圖片

288
00:12:41,839 --> 00:12:43,680
所以我們可以測試模型對吧

289
00:12:43,680 --> 00:12:46,079
所以我們先把這個改成 100 張圖片

290
00:12:46,079 --> 00:12:46,560
和

291
00:12:46,560 --> 00:12:48,560
現在我們來讀取這 100 張圖片

292
00:12:48,560 --> 00:12:53,600
我希望這將比閱讀 1000 張圖片快得多

293
00:12:53,600 --> 00:12:56,160
所以希望它可以在幾秒鐘內完成

294
00:12:56,160 --> 00:12:57,680
然後我們可以繼續

295
00:12:57,680 --> 00:13:01,519
因為我們需要一些測試用的圖片

296
00:13:01,519 --> 00:13:01,839
好的

297
00:13:01,839 --> 00:13:07,839
所以我已經用 1000 張圖片訓練了一個模型

298
00:13:08,000 --> 00:13:08,480
好的

299
00:13:08,480 --> 00:13:08,959
所以

300
00:13:08,959 --> 00:13:11,920
現在讓我們將那些轉換為 numpy 區域

301
00:13:11,920 --> 00:13:15,920
否則這些圖像只是一堆列表對吧

302
00:13:15,920 --> 00:13:17,200
所以讓我們轉換它

303
00:13:17,200 --> 00:13:18,639
然後擴展尺寸

304
00:13:18,639 --> 00:13:20,880
現在讓我們對我們的面具做完全相同的操作

305
00:13:20,880 --> 00:13:24,000
這應該會非常快速

306
00:13:24,000 --> 00:13:28,480
就這樣閱讀這 100 個面具

307
00:13:28,480 --> 00:13:30,720
隨時應該就會完成

308
00:13:30,720 --> 00:13:34,240
然後我們就可以重新開始了

309
00:13:34,240 --> 00:13:34,720
好的

310
00:13:34,720 --> 00:13:36,160
現在我們繼續

311
00:13:36,160 --> 00:13:38,639
並且列印出我們影像遮罩的形狀

312
00:13:38,639 --> 00:13:38,959
和

313
00:13:38,959 --> 00:13:41,760
影像中的最大像素值是多少

314
00:13:41,760 --> 00:13:43,440
以及遮罩中的標籤

315
00:13:43,440 --> 00:13:45,519
好的，我們會看看為什麼這些很重要

316
00:13:45,519 --> 00:13:46,320
所以

317
00:13:46,320 --> 00:13:51,199
我們來打印這些，所以我們應該會有 100 張圖片，很明顯我們把數量從 1000 改為 100

318
00:13:51,199 --> 00:13:55,519
所以這就是每張影像所代表的，每張影像是 256 乘 256 乘 1

319
00:13:55,519 --> 00:13:58,880
而那個 1 是因為它是灰階影像，我們

320
00:13:58,880 --> 00:14:01,680
對於遮罩，我們也有差不多相同的

321
00:14:01,680 --> 00:14:07,120
現在最大像素值為 255

322
00:14:07,120 --> 00:14:08,000
在我們的圖像中

323
00:14:08,000 --> 00:14:09,279
因為我們尚未進行正規化

324
00:14:09,279 --> 00:14:09,920
或縮放

325
00:14:09,920 --> 00:14:14,079
或將標籤圖像輸入到遮罩中，標籤也為 0

326
00:14:14,079 --> 00:14:16,720
並且 255 0 對應於背景

327
00:14:16,720 --> 00:14:18,720
這是黑色背景

328
00:14:18,720 --> 00:14:21,600
和 255 對應於這些明亮的圖像，這正是

329
00:14:21,600 --> 00:14:23,920
他們如何提供他們的數據集

330
00:14:23,920 --> 00:14:26,399
標籤 0 到 55 沒有問題

331
00:14:26,399 --> 00:14:28,880
我喜歡將標籤設定為 0 1 2 3。

332
00:14:28,880 --> 00:14:32,800
所以我將這個除以 255，同樣也將這個除以 255。

333
00:14:32,800 --> 00:14:35,040
所以我們有了縮放。

334
00:14:35,040 --> 00:14:37,600
您可以選擇使用最小最大標準化，而不是進行分割

335
00:14:37,600 --> 00:14:39,600
或規範這些東西

336
00:14:39,600 --> 00:14:43,279
所以我選擇了簡單的方法，這樣就可以了

337
00:14:43,279 --> 00:14:47,920
是將我的影像數據集和匹配數據集除以 255。這樣就好了

338
00:14:47,920 --> 00:14:50,399
現在我們的值將會是 0

339
00:14:50,399 --> 00:14:52,720
或者 1 來對應我的遮罩

340
00:14:52,720 --> 00:14:55,440
和 0 到 1

341
00:14:55,440 --> 00:14:56,480
用於我的圖像

342
00:14:56,480 --> 00:15:01,519
到目前為止，一切順利，我們還沒做太多事情，我們只是

343
00:15:01,519 --> 00:15:02,880
整理了我們的圖像

344
00:15:02,880 --> 00:15:08,000
並以排序後的順序載入了前 100 張圖像

345
00:15:08,000 --> 00:15:09,760
和我們的面具一樣

346
00:15:09,760 --> 00:15:11,760
然後我們意識到我們的圖像

347
00:15:11,760 --> 00:15:13,600
和面具需要調整大小

348
00:15:13,600 --> 00:15:17,279
然後我們把它們除以 255 學校來縮放，僅此而已

349
00:15:17,279 --> 00:15:19,120
現在我正在劃分我的圖像

350
00:15:19,120 --> 00:15:23,440
和掩碼成 80 用於訓練，20 用於測試

351
00:15:23,440 --> 00:15:23,920
好的

352
00:15:23,920 --> 00:15:26,720
那麼我們就去做這個，即使我們不打算進行訓練

353
00:15:26,720 --> 00:15:32,880
我這麼做的原因是進行一次基本檢查總是個好主意，這意味著

354
00:15:32,880 --> 00:15:37,279
嘿，生成一個介於 0 到 100 之間的隨機數字，在這個情況下

355
00:15:37,279 --> 00:15:38,839
或 99

356
00:15:38,839 --> 00:15:42,560
並繪製或標記你的圖像

357
00:15:42,560 --> 00:15:44,560
和面具

358
00:15:44,560 --> 00:15:46,160
查看它們是否對齊，這正是

359
00:15:46,160 --> 00:15:47,360
我在這裡嘗試做的

360
00:15:47,360 --> 00:15:50,720
如果它們對齊，那我就可以開始了，所以這看起來非常好

361
00:15:50,720 --> 00:15:52,560
這看起來像那些圖片

362
00:15:52,560 --> 00:15:57,519
以及面具，讓我們載入另一張隨機圖片，沒有問題，太好了

363
00:15:57,519 --> 00:15:57,920
好的

364
00:15:57,920 --> 00:16:01,519
所以一切都對應上了，這點非常重要，因為

365
00:16:01,519 --> 00:16:03,440
你正在從磁碟載入資料對吧

366
00:16:03,440 --> 00:16:04,560
然後繼續進行

367
00:16:04,560 --> 00:16:08,399
並定義你的模型，我們在上一個影片中已經講解過這一點

368
00:16:08,399 --> 00:16:12,720
正確定義卷積區塊，定義編碼器區塊

369
00:16:12,720 --> 00:16:14,079
這兩個

370
00:16:14,079 --> 00:16:15,440
和解碼器

371
00:16:15,440 --> 00:16:16,480
塊，這是我們的模型

372
00:16:16,480 --> 00:16:19,440
我不想浪費你的時間來講這些

373
00:16:19,440 --> 00:16:22,320
因為我們在上一個影片中花了半小時談論這個

374
00:16:22,320 --> 00:16:22,959
好的

375
00:16:22,959 --> 00:16:25,040
我們定義了這個模型

376
00:16:25,040 --> 00:16:28,240
當我調用它時，它會返回這個模型

377
00:16:28,240 --> 00:16:30,399
那麼我該如何調用它呢

378
00:16:30,399 --> 00:16:32,560
在哪裡給它輸入形狀

379
00:16:32,560 --> 00:16:34,880
和類別數量正確

380
00:16:34,880 --> 00:16:36,880
我們還添加了這些行

381
00:16:36,880 --> 00:16:39,040
如果我的類別數量不是二元的

382
00:16:39,040 --> 00:16:40,800
那麼它將使用 softmax

383
00:16:40,800 --> 00:16:41,680
如果是二元的

384
00:16:41,680 --> 00:16:44,480
意味著類別數量等於一，記住二進位

385
00:16:44,480 --> 00:16:47,120
這並不意味著兩個二進位代表一個輸出

386
00:16:47,120 --> 00:16:49,120
是的，那麼它將使用 sigmoid

387
00:16:49,120 --> 00:16:50,800
所以我的輸入維度

388
00:16:50,800 --> 00:16:53,360
或者輸入形狀是我的圖像高度寬度

389
00:16:53,360 --> 00:16:54,560
以及通道數量

390
00:16:54,560 --> 00:16:56,480
即 256 到 56 1.

391
00:16:56,480 --> 00:16:58,000
所以讓我們繼續定義這個

392
00:16:58,000 --> 00:17:01,360
然後建立模型

393
00:17:01,360 --> 00:17:02,959
非常簡單，你提供這個

394
00:17:02,959 --> 00:17:08,079
然後我們將使用 Adam 作為優化器來編譯模型

395
00:17:08,079 --> 00:17:11,839
二元交叉熵 這是一個二元語義分割

396
00:17:11,839 --> 00:17:16,400
和指標 我們將使用準確度來訓練指標 就像我說的 交集

397
00:17:16,400 --> 00:17:19,599
聯合度是一個更好的指標來追蹤

398
00:17:19,599 --> 00:17:22,079
對於語義分割，我們會在未來涵蓋這個主題

399
00:17:22,079 --> 00:17:24,480
但準確度有效，並不是那樣的

400
00:17:24,480 --> 00:17:26,720
但它只是不告訴你有多好

401
00:17:26,720 --> 00:17:32,000
這裡在我的時期中，1 項中的 25 項，真是太好了

402
00:17:32,000 --> 00:17:34,000
或

403
00:17:34,000 --> 00:17:39,360
時期一，是的，這是我的時期一中的 50 項中的一項，我應該這麼說

404
00:17:39,360 --> 00:17:42,799
我做了多少個時期，抱歉，我做了 25 個時期

405
00:17:42,799 --> 00:17:44,720
這 50 個是 50 次迭代

406
00:17:44,720 --> 00:17:46,400
所以 1/25

407
00:17:46,400 --> 00:17:51,440
在第一個時期準確度對驗證來說很差，而在第二個時期為 92

408
00:17:51,440 --> 00:17:54,000
突然之間

409
00:17:54,000 --> 00:17:55,520
那這是好還是壞呢？

410
00:17:55,520 --> 00:17:58,320
我們不知道，對吧？我的意思是，這就是精確度的問題所在

411
00:17:58,320 --> 00:18:01,440
所以當我往下走時，我的準確率是 99%

412
00:18:01,440 --> 00:18:02,240
但交集

413
00:18:02,240 --> 00:18:03,360
與聯集將會找到

414
00:18:03,360 --> 00:18:06,559
判斷它是好還是壞，然後我保存了我的模型

415
00:18:06,559 --> 00:18:06,880
好的

416
00:18:06,880 --> 00:18:08,000
現在我們下去吧

417
00:18:08,000 --> 00:18:09,919
這就是圖表的樣子

418
00:18:09,919 --> 00:18:11,280
那麼我們繼續前進

419
00:18:11,280 --> 00:18:13,760
並載入模型

420
00:18:13,760 --> 00:18:17,440
我們將其儲存為這個名稱，所以我們繼續

421
00:18:17,440 --> 00:18:20,320
並載入模型，我將設置 compile 為 false

422
00:18:20,320 --> 00:18:25,360
因為我不再進行進一步的訓練，我只是用這個模型來進行推斷，就這樣

423
00:18:25,360 --> 00:18:26,400
好的

424
00:18:26,400 --> 00:18:30,160
以及交集比率（Intersection over Union，IoU）計算

425
00:18:30,160 --> 00:18:32,240
我的意思是你可以追蹤交集佔並集比例

426
00:18:32,240 --> 00:18:35,200
這是你應該在每個時代（epoch）進行的操作

427
00:18:35,200 --> 00:18:36,480
而這僅在

428
00:18:36,480 --> 00:18:40,640
如果你把交集與聯合比作為你在這裡追蹤的指標之一

429
00:18:40,640 --> 00:18:45,520
但完成後，你可以計算整個數據集的交集與聯合比

430
00:18:45,520 --> 00:18:49,600
這就是我們在這裡嘗試做的

431
00:18:49,600 --> 00:18:52,400
首先，我們需要進行預測

432
00:18:52,400 --> 00:18:55,919
在我們的測試數據集上

433
00:18:55,919 --> 00:18:56,400
好的

434
00:18:56,400 --> 00:19:00,000
所以我們來進行預測，在我們的情況下，測試數據集只有 20 張圖片

435
00:19:00,000 --> 00:19:06,559
因為我們只讀取了幾百個，我應該更改過來，但讓我們檢查一下我們的 model.predict

436
00:19:06,559 --> 00:19:07,919
你怎麼預測

437
00:19:07,919 --> 00:19:14,400
model.predict，再次說明這與分類相同，沒關係，始終是 model.predict

438
00:19:14,400 --> 00:19:19,280
我在我的 x 測試數據集中進行預測，那是 20 張圖像

439
00:19:19,280 --> 00:19:24,080
然後我將應用 0.5 的閾值

440
00:19:24,080 --> 00:19:26,000
這意味著它會轉換

441
00:19:26,000 --> 00:19:28,240
每個值的機率

442
00:19:28,240 --> 00:19:32,080
因為當你執行 model.predict 時，它會給你 sigmoid

443
00:19:32,080 --> 00:19:35,760
我一直回到基本概念，但這些非常重要

444
00:19:35,760 --> 00:19:38,240
我們正在使用 你正在使用

445
00:19:38,240 --> 00:19:42,320
激活函數為 sigmoid

446
00:19:42,320 --> 00:19:45,600
在這裡，sigmoid 函數會給出介於 0

447
00:19:45,600 --> 00:19:46,400
和 1

448
00:19:46,400 --> 00:19:50,000
這意味著我們需要將那個概率轉換成類別

449
00:19:50,000 --> 00:19:51,039
而那就是

450
00:19:51,039 --> 00:19:54,320
我們就用我們的閾值來做這件事

451
00:19:54,320 --> 00:19:54,880
好的

452
00:19:54,880 --> 00:19:59,520
我們將放入每個值

453
00:19:59,520 --> 00:20:01,840
預測值超過 0.5

454
00:20:01,840 --> 00:20:03,760
我會稱它為線粒體

455
00:20:03,760 --> 00:20:04,880
那就是這樣

456
00:20:04,880 --> 00:20:09,679
所以我們來計算交集與聯合比率，你可以進行導入

457
00:20:09,679 --> 00:20:12,000
從 keras.metrics 導入 iou

458
00:20:12,000 --> 00:20:14,400
並應用這個，這僅適用於 TensorFlow

459
00:20:14,400 --> 00:20:17,200
2 及之後，之前你沒有那個意思的 IOU

460
00:20:17,200 --> 00:20:18,880
所以可能會引發一些錯誤

461
00:20:18,880 --> 00:20:21,840
希望你們都在使用 TensorFlow 2 或更高版本

462
00:20:21,840 --> 00:20:26,720
因此，對於 IoU 計算，我會說我的類別數量等於 2

463
00:20:26,720 --> 00:20:27,679
因為我有 0

464
00:20:27,679 --> 00:20:30,000
和 1. 這可能會令人困惑

465
00:20:30,000 --> 00:20:33,200
但對於 Keras 的 IOU，你有 2 0

466
00:20:33,200 --> 00:20:33,840
和一個

467
00:20:33,840 --> 00:20:35,760
所以它會看起來好，你有零

468
00:20:35,760 --> 00:20:36,320
和一個

469
00:20:36,320 --> 00:20:39,520
那麼讓我計算 IOU，這就是它在做的事

470
00:20:39,520 --> 00:20:43,760
所以你在這裡用類別數來實例化平均 IOU

471
00:20:43,760 --> 00:20:49,440
然後你使用從這裡得到的預測值來更新其狀態

472
00:20:49,440 --> 00:20:51,039
我將使用閾值

473
00:20:51,039 --> 00:20:53,440
然後是測試值對吧

474
00:20:53,440 --> 00:20:53,760
所以

475
00:20:53,760 --> 00:20:56,480
然後繼續打印結果

476
00:20:56,480 --> 00:21:01,200
所以之前用我不確定的 200 張圖片，我得到 91 的 IoU

477
00:21:01,200 --> 00:21:06,400
這非常棒，我應該說平均 IoU 是 92，這很棒，意味著

478
00:21:06,400 --> 00:21:10,240
這個線粒體的交並比

479
00:21:10,240 --> 00:21:14,799
背景的交並比達到 92％

480
00:21:14,799 --> 00:21:19,360
對於語義分割，任何超過 90 的交並比都是優秀的

481
00:21:19,360 --> 00:21:22,320
那麼我們設定 0.5 作為閾值

482
00:21:22,320 --> 00:21:29,120
而這部分的代碼基本上是載入圖像

483
00:21:29,120 --> 00:21:31,120
希望是一張隨機圖像，就在那裡

484
00:21:31,120 --> 00:21:33,919
從我們的測試數據集中加載一個隨機圖像

485
00:21:33,919 --> 00:21:34,799
然後預測

486
00:21:34,799 --> 00:21:37,600
和列印，就是這樣繪圖

487
00:21:37,600 --> 00:21:40,000
那我們來做吧

488
00:21:40,000 --> 00:21:41,120
這裡沒什麼好看的

489
00:21:41,120 --> 00:21:42,640
我們再試一次，希望能成功

490
00:21:42,640 --> 00:21:44,159
我們會得到更好的影像

491
00:21:44,159 --> 00:21:48,240
天啊，我們有所有空白的圖片，這是你的測試標籤

492
00:21:48,240 --> 00:21:50,159
這是我們得到的結果

493
00:21:50,159 --> 00:21:53,760
預測結果並不那麼驚人

494
00:21:53,760 --> 00:21:56,880
非常好的分段

495
00:21:57,120 --> 00:21:59,840
沒有任何內容

496
00:21:59,840 --> 00:22:04,640
我們有許多空的數據集，這也不算壞

497
00:22:04,640 --> 00:22:06,640
讓我們把這個改為 x train

498
00:22:06,640 --> 00:22:10,720
因為我們在訓練中有更多的數據

499
00:22:10,720 --> 00:22:13,520
我們繼續檢查一下，你也可以載入外部

500
00:22:13,520 --> 00:22:14,880
圖像來檢查情況

501
00:22:14,880 --> 00:22:15,280
好的

502
00:22:15,280 --> 00:22:16,640
所以那就是

503
00:22:16,640 --> 00:22:17,840
我的意思是，這並不完美

504
00:22:17,840 --> 00:22:23,200
但這不是壞的分段，它正在檢測

505
00:22:24,840 --> 00:22:26,159
粒線體

506
00:22:26,159 --> 00:22:28,799
啊，我覺得

507
00:22:28,799 --> 00:22:34,000
哦，我應該說 x 列減一，抱歉

508
00:22:34,640 --> 00:22:37,600
好了，就這樣

509
00:22:37,600 --> 00:22:40,159
稍微好一些會更好

510
00:22:40,159 --> 00:22:41,440
再來一次

511
00:22:41,440 --> 00:22:43,440
是的，我們已經看過這個了

512
00:22:43,440 --> 00:22:45,360
所以我不確定

513
00:22:45,360 --> 00:22:48,799
為什麼它沒有查看測試編號

514
00:22:48,799 --> 00:22:50,240
但這沒問題

515
00:22:50,240 --> 00:22:53,360
x 測試，讓我們在之前改為測試

516
00:22:53,360 --> 00:22:57,520
我會與你分享代碼，不然你會想知道為什麼我在使用 train

517
00:22:57,520 --> 00:23:00,640
好的，我保證不再多說

518
00:23:00,640 --> 00:23:02,640
好，讓我們以這個結尾吧

519
00:23:02,640 --> 00:23:04,720
那我們學到了什麼

520
00:23:04,720 --> 00:23:08,320
一旦你定義了你的單位

521
00:23:08,320 --> 00:23:12,080
這非常簡單，其餘的都是數據處理

522
00:23:12,080 --> 00:23:14,320
你只需將數據劃分為額外的索引測試

523
00:23:14,320 --> 00:23:15,440
傳遞給你的單元

524
00:23:15,440 --> 00:23:16,960
讓單位發揮其魔力

525
00:23:16,960 --> 00:23:20,720
然後通常它在下一個視頻中表現出色，讓我們看看多類別

526
00:23:20,720 --> 00:23:23,200
這與二分類略有不同

527
00:23:23,200 --> 00:23:25,600
因為你必須將圖像轉換為類別

528
00:23:25,600 --> 00:23:30,320
除此之外，其他一切都相同，我們將使用完全相同的

529
00:23:30,320 --> 00:23:32,240
模型

530
00:23:32,240 --> 00:23:36,400
所以無論你在使用什麼，你都有一個通用模型

531
00:23:36,400 --> 00:23:37,039
好的

532
00:23:37,039 --> 00:23:37,440
所以

533
00:23:37,440 --> 00:23:39,120
再次在下個影片中見面

534
00:23:39,120 --> 00:23:42,159
影片，直到那時不要忘記訂閱這個頻道，謝謝大家

