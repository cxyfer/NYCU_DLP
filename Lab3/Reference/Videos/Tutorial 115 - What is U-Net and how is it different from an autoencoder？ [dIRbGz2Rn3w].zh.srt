1
00:00:00,799 --> 00:00:05,920
嗨大家好，歡迎回到圖像處理的入門 Python 教學

2
00:00:05,920 --> 00:00:09,200
在最後幾個視頻中，我們研究了自動編碼器

3
00:00:09,200 --> 00:00:12,240
再來一個快速總結，自動編碼器

4
00:00:12,240 --> 00:00:14,639
根據定義，它們接受一個輸入

5
00:00:14,639 --> 00:00:16,720
他們嘗試重建這些輸入

6
00:00:16,720 --> 00:00:22,080
我們正試圖通過提供輸入來欺騙這些自動編碼器

7
00:00:22,080 --> 00:00:24,320
比如說，一張圖片

8
00:00:24,320 --> 00:00:26,960
以及預期輸出會有所不同

9
00:00:26,960 --> 00:00:30,480
通過這樣做，我們嘗試使用自動編碼器

10
00:00:30,480 --> 00:00:31,840
或者你知道的

11
00:00:31,840 --> 00:00:35,520
或為特定應用如影像著色自訂自動編碼器

12
00:00:35,520 --> 00:00:36,480
或去噪

13
00:00:36,480 --> 00:00:41,440
我們目前的重點是看看這是否可以用於語意分割

14
00:00:41,440 --> 00:00:44,399
在上一個視頻中，我們意識到也許不是

15
00:00:44,399 --> 00:00:49,520
我的意思是，結果在初看時看起來很好

16
00:00:49,520 --> 00:00:52,960
但存在空間信息的丟失

17
00:00:52,960 --> 00:00:55,440
這對於語意分割來說非常重要

18
00:00:55,440 --> 00:00:58,160
因為畢竟我們正在嘗試分類

19
00:00:58,160 --> 00:00:59,760
我們影像中的每一個像素

20
00:00:59,760 --> 00:01:02,640
那麼在這段影片中，我們來學習一下單位

21
00:01:02,640 --> 00:01:04,640
以及它們如何與自動編碼器不同

22
00:01:04,640 --> 00:01:05,438
或

23
00:01:05,438 --> 00:01:08,479
或許我應該將它表述為它們如何與自動編碼器相似

24
00:01:08,479 --> 00:01:10,320
自編碼器的限制是什麼

25
00:01:10,320 --> 00:01:12,479
單位如何解決這一限制

26
00:01:12,479 --> 00:01:14,880
讓我們先了解一下這一點，所以首先讓我們

27
00:01:14,880 --> 00:01:17,280
快速看一下我們的自動編碼器

28
00:01:17,280 --> 00:01:20,159
再次顯示一個大圖像

29
00:01:20,159 --> 00:01:22,400
漸漸變小

30
00:01:22,400 --> 00:01:25,200
但接著特徵數量增加

31
00:01:25,200 --> 00:01:27,439
是的，這裡 128 256 512

32
00:01:27,439 --> 00:01:28,560
以此類推

33
00:01:28,560 --> 00:01:35,520
從這個瓶頸開始，圖像將恢復到原始大小

34
00:01:35,520 --> 00:01:38,880
如果你提供一張這樣的圖片作為輸入

35
00:01:38,880 --> 00:01:43,040
如果你的預期輸出是相同的，那麼它會將輸入重新構建回來

36
00:01:43,040 --> 00:01:43,520
但

37
00:01:43,520 --> 00:01:49,920
如果你提供的預期輸出是這樣，那麼它應該會重建出類似這樣的東西

38
00:01:49,920 --> 00:01:54,000
但這就是我們從上一段視頻看到的內容

39
00:01:54,000 --> 00:01:55,680
所以這是我們所期望的

40
00:01:55,680 --> 00:01:56,719
而這是我們看到的

41
00:01:56,719 --> 00:01:57,840
看起來很棒

42
00:01:57,840 --> 00:01:59,840
初看時顏色都正確

43
00:01:59,840 --> 00:02:01,600
它把一切都做對了

44
00:02:01,600 --> 00:02:04,079
大部分的空間位置正確，除了

45
00:02:04,079 --> 00:02:05,280
這不是非常準確

46
00:02:05,280 --> 00:02:06,640
當涉及到這些空間時

47
00:02:06,640 --> 00:02:07,600
你會看到一切看起來

48
00:02:07,600 --> 00:02:08,878
有點模糊

49
00:02:08,878 --> 00:02:10,479
它幾乎看起來像

50
00:02:10,479 --> 00:02:14,239
這是上述圖像的高斯濾波版本

51
00:02:14,239 --> 00:02:17,360
這是模糊的圓形物體，再次發生

52
00:02:17,360 --> 00:02:24,080
因為當你到達這裡時，它失去了所有的空間信息

53
00:02:24,080 --> 00:02:29,760
在這裡，你在第一次對話中擁有非常好的空間信息

54
00:02:29,760 --> 00:02:30,959
稍微具體一點

55
00:02:30,959 --> 00:02:33,440
但是到 con5 你失去了那個信息

56
00:02:33,440 --> 00:02:36,959
那麼我們如何獲得這些，我們如何保留這些特殊信息

57
00:02:36,959 --> 00:02:40,239
這就是單元再次解決的問題，正如你可能已經意識到的

58
00:02:40,239 --> 00:02:44,720
所以讓我們以一種簡單的抽象方式來看看自動編碼器，現在不要去看

59
00:02:44,720 --> 00:02:47,280
讓這變得像這個自動編碼器一樣複雜

60
00:02:47,280 --> 00:02:49,920
再次是任何從大尺寸變小的東西

61
00:02:49,920 --> 00:02:53,120
然後在卷積層中再次變大

62
00:02:53,120 --> 00:02:54,080
所以

63
00:02:54,080 --> 00:02:56,560
我們有這個編碼器部分，剩下的就是解碼器

64
00:02:56,560 --> 00:02:59,440
對，如何有效保留空間資訊

65
00:02:59,440 --> 00:03:02,879
如果我們取

66
00:03:02,879 --> 00:03:08,400
將這裡的空間資訊添加到解碼器層的下一部分

67
00:03:08,400 --> 00:03:12,319
如果我們能夠將編碼器的空間資訊添加到解碼器的右側

68
00:03:12,319 --> 00:03:13,200
所以這正是

69
00:03:13,200 --> 00:03:15,680
我所說的

70
00:03:15,680 --> 00:03:17,840
獲取空間資訊

71
00:03:17,840 --> 00:03:21,280
將其添加到解碼器中的功能資訊

72
00:03:21,280 --> 00:03:22,879
當我說添加空間資訊時

73
00:03:22,879 --> 00:03:24,879
我的意思是取出這些功能

74
00:03:24,879 --> 00:03:26,319
從編碼器

75
00:03:26,319 --> 00:03:29,360
把它加到解碼器，這正是

76
00:03:29,360 --> 00:03:34,000
現在讓我們做這些箭頭

77
00:03:34,000 --> 00:03:36,319
這些箭頭是直的

78
00:03:36,319 --> 00:03:39,519
這就是我現在試圖以圖形方式做的全部

79
00:03:39,519 --> 00:03:42,239
如果我把這些弄直會發生什麼

80
00:03:42,239 --> 00:03:43,280
我要彎曲

81
00:03:43,280 --> 00:03:45,680
將它彎成 U 形

82
00:03:45,680 --> 00:03:46,720
是的，這正是

83
00:03:46,720 --> 00:03:48,080
單位是什麼

84
00:03:48,080 --> 00:03:54,640
所以我的編碼器仍然在那裡，我只是把這些連接直接連接了

85
00:03:54,640 --> 00:03:58,799
所以這有點彎曲，瓶頸就在這裡

86
00:03:58,799 --> 00:04:02,640
所以這圖完全一樣，這只是一種不同的表示方式

87
00:04:02,640 --> 00:04:04,400
所以我可以解釋

88
00:04:04,400 --> 00:04:06,560
叫它單元

89
00:04:06,560 --> 00:04:10,640
這部分基本上是我們的編碼器，您可以在這裡看到

90
00:04:10,640 --> 00:04:14,879
這部分基本上是我們的解碼器，唯一的區別是這個

91
00:04:14,879 --> 00:04:18,320
這是這些輸入的串聯

92
00:04:18,320 --> 00:04:21,839
來自這些層的輸入，就這樣，這就是簡而言之

93
00:04:21,839 --> 00:04:25,919
單元是什麼，你可以閱讀論文來獲得更多關於這方面的信息

94
00:04:25,919 --> 00:04:28,080
這是這篇論文

95
00:04:28,080 --> 00:04:32,240
來自 2015 年的生物醫學影像分割的卷積神經網絡

96
00:04:32,240 --> 00:04:34,720
儘管這是五六年前的

97
00:04:34,720 --> 00:04:37,040
概念仍然

98
00:04:37,040 --> 00:04:41,919
規則，我應該說這仍然是語義分割的最佳方法

99
00:04:41,919 --> 00:04:43,600
現在只需了解

100
00:04:43,600 --> 00:04:46,800
這稍微好一些，這是他們實際發布的原始圖像

101
00:04:46,800 --> 00:04:51,360
在他們的論文中，輸入圖像為 572 x 572

102
00:04:51,360 --> 00:04:56,000
等等，但這不重要，只需更仔細地查看這個表示

103
00:04:56,000 --> 00:05:00,960
從輸入來看，你有兩個卷積層，藍色線條，藍色箭頭

104
00:05:00,960 --> 00:05:02,960
代表三乘三的卷積

105
00:05:02,960 --> 00:05:05,520
使用 ReLU 激活函數的操作

106
00:05:05,520 --> 00:05:06,000
好的

107
00:05:06,000 --> 00:05:08,960
每條藍線都是一個 2D 卷積

108
00:05:08,960 --> 00:05:09,520
或 3D

109
00:05:09,520 --> 00:05:11,360
如果你想將這個擴展到 3D

110
00:05:11,360 --> 00:05:13,919
但我們就假設這是一個卷積

111
00:05:13,919 --> 00:05:15,440
隨後是

112
00:05:15,440 --> 00:05:18,400
無線電啟用卷積與鐵路啟用

113
00:05:18,400 --> 00:05:21,520
在這之後，你將進行最大池化

114
00:05:21,520 --> 00:05:22,639
2 乘 2 最大池化

115
00:05:22,639 --> 00:05:27,120
當你進行 2x2 的最大池化時，輸入圖像的大小會縮小

116
00:05:27,120 --> 00:05:30,240
所以你的輸入圖像不再是 570

117
00:05:30,240 --> 00:05:30,720
或其他什麼

118
00:05:30,720 --> 00:05:33,440
現在它是 284 乘 284

119
00:05:33,440 --> 00:05:34,000
好的

120
00:05:34,000 --> 00:05:39,919
並且過濾器的數量從 64 增加到 128，再到 256，再到 512

121
00:05:39,919 --> 00:05:43,759
完全相同的結構我們在自動編碼器中看到過

122
00:05:43,759 --> 00:05:44,479
好的

123
00:05:44,479 --> 00:05:50,639
綠色箭頭表示上卷積，這可以是上採樣

124
00:05:50,639 --> 00:05:53,360
或上卷積轉換 2D 反向

125
00:05:53,360 --> 00:05:57,680
這些是綠色箭頭

126
00:05:57,680 --> 00:06:00,880
然後你會看到藍色箭頭，它們是傳遞的

127
00:06:00,880 --> 00:06:03,600
這裡的兩者都是解碼器的一部分

128
00:06:03,600 --> 00:06:05,680
以及這裡作為編碼器的一部分

129
00:06:05,680 --> 00:06:08,080
然後你會得到你的輸出分段地圖

130
00:06:08,080 --> 00:06:10,319
現在讓我們來看一下 256x256

131
00:06:10,319 --> 00:06:13,440
因為這樣很方便，我們一直在使用 256 張圖像

132
00:06:13,440 --> 00:06:15,360
所以讓我們看看這裡的相同結構

133
00:06:15,360 --> 00:06:16,000
好的

134
00:06:16,000 --> 00:06:19,759
所以我的輸入圖像是 256 乘 256

135
00:06:19,759 --> 00:06:21,199
一個通道

136
00:06:21,199 --> 00:06:24,000
假設我的輸入圖像不是彩色的，而是灰階的

137
00:06:24,000 --> 00:06:27,520
我的意思是可以是三個，但現在假設是只有一個

138
00:06:27,520 --> 00:06:30,400
在前兩層卷積之後

139
00:06:30,400 --> 00:06:33,919
我在那裡有 64 個過濾器

140
00:06:33,919 --> 00:06:36,319
然後我執行 2x2 的最大池化

141
00:06:36,319 --> 00:06:39,919
這意味著我的 256 變成 128。

142
00:06:39,919 --> 00:06:43,840
所以這個維度是 128 乘 128

143
00:06:43,840 --> 00:06:47,440
然後我們使用多少個濾波器進行卷積操作

144
00:06:47,440 --> 00:06:50,000
現在 128 個過濾器

145
00:06:50,000 --> 00:06:51,199
然後進行最大池化

146
00:06:51,199 --> 00:06:53,440
這意味著我的 128 變成 64

147
00:06:53,440 --> 00:06:56,639
然後我將濾波器的數量加倍到 256

148
00:06:56,639 --> 00:06:59,120
我一直做到這裡為止

149
00:06:59,120 --> 00:07:01,759
在這裡我有 1024

150
00:07:01,759 --> 00:07:02,319
功能

151
00:07:02,319 --> 00:07:07,120
並且僅在我的影像尺寸中為 16x16

152
00:07:07,120 --> 00:07:09,440
現在我想上升

153
00:07:09,440 --> 00:07:12,560
從 1024 我去戰鬥得很好，為什麼

154
00:07:12,560 --> 00:07:15,440
因為我有二乘二的上卷積意思

155
00:07:15,440 --> 00:07:17,840
或把這看作上採樣

156
00:07:17,840 --> 00:07:22,240
好的，抱歉，這裡的大小應該是 32 乘 32，這就是我所說的

157
00:07:22,240 --> 00:07:22,800
好的

158
00:07:22,800 --> 00:07:26,319
所以從 16 x 16 開始，我的尺寸會變成 32 x 32

159
00:07:26,319 --> 00:07:29,840
因為我有 2 x 2 的上採樣。

160
00:07:29,840 --> 00:07:30,639
好的

161
00:07:30,639 --> 00:07:34,400
並且我從 10 24 個濾波器增加到 512 個

162
00:07:34,400 --> 00:07:36,319
然後是兩次卷積

163
00:07:36,319 --> 00:07:38,400
相同的東西重複

164
00:07:38,400 --> 00:07:39,840
向上卷積

165
00:07:39,840 --> 00:07:42,720
所以你的大小從 32 增加到 64。

166
00:07:42,720 --> 00:07:44,479
然後是卷積

167
00:07:44,479 --> 00:07:45,440
以此類推

168
00:07:45,440 --> 00:07:45,759
現在

169
00:07:45,759 --> 00:07:48,479
串接在哪裡出現

170
00:07:48,479 --> 00:07:49,840
所以我們來看看這個

171
00:07:49,840 --> 00:07:52,160
因為那邊不太擁擠對吧

172
00:07:52,160 --> 00:07:53,360
所以你有

173
00:07:53,360 --> 00:07:56,960
這個操作後你會有 128

174
00:07:56,960 --> 00:07:58,639
就在那裡的過濾器功能

175
00:07:58,639 --> 00:08:02,080
好的，從 256 你會降到 128

176
00:08:02,080 --> 00:08:10,000
但是我們將從這裡添加的 128 個數據合併到這些數據中

177
00:08:10,000 --> 00:08:10,560
好的

178
00:08:10,560 --> 00:08:12,960
所以這就是我們正在串聯的內容

179
00:08:12,960 --> 00:08:16,560
然後進行我們的卷積操作

180
00:08:16,560 --> 00:08:20,639
然後我們進行上採樣

181
00:08:20,639 --> 00:08:26,400
還有卷積操作，濾波器數量為 128，顯然是對的

182
00:08:26,400 --> 00:08:28,800
所以這裡有 128 加 128

183
00:08:28,800 --> 00:08:34,080
但接下來的卷積，我們是說，把它轉換成 128 個濾波器

184
00:08:34,080 --> 00:08:36,958
所以在卷積操作之後，你會有 128 個

185
00:08:36,958 --> 00:08:39,200
影像大小為 128 x 128。

186
00:08:39,200 --> 00:08:42,880
所以這個藍色的

187
00:08:42,880 --> 00:08:46,080
就是那些以藍色顯示的部分

188
00:08:46,080 --> 00:08:50,560
他們代表來自解碼器的特徵

189
00:08:50,560 --> 00:08:52,320
和那個透明的

190
00:08:52,320 --> 00:08:56,880
像這裡的白色方框，這裡有來自這裡的特徵

191
00:08:56,880 --> 00:09:02,880
這意味著這個白色框包含我們非常需要的空間資訊

192
00:09:02,880 --> 00:09:05,200
而這個藍色框包含

193
00:09:05,200 --> 00:09:09,440
用來理解特徵所需的特徵資訊。我希望這樣能讓你明白

194
00:09:09,440 --> 00:09:12,080
所以我們在離開時做的完全相同

195
00:09:12,080 --> 00:09:12,720
最後

196
00:09:12,720 --> 00:09:15,920
因為這是一個，你知道的

197
00:09:15,920 --> 00:09:21,200
一個通道的影像，我在這裡輸出，或在這個例子中我的 y 只有一個通道

198
00:09:21,200 --> 00:09:24,640
這就是我的輸出

199
00:09:24,640 --> 00:09:29,279
你怎麼編碼？非常簡單，就像你在這裡看到的一樣

200
00:09:29,279 --> 00:09:35,200
對不起，我的輸入是 256 到 56 1，那是我的輸入

201
00:09:35,200 --> 00:09:40,000
然後進行兩次卷積操作，每次都是三乘三

202
00:09:40,000 --> 00:09:42,640
和 Rayleigh

203
00:09:42,720 --> 00:09:45,600
可轉換性 可轉換性

204
00:09:45,600 --> 00:09:47,519
有多少個濾鏡

205
00:09:47,519 --> 00:09:52,800
64 個過濾器適用於我的操作 64 個過濾器 64 個過濾器

206
00:09:52,800 --> 00:09:55,519
三乘三，您可以在這裡輸入三或三乘三

207
00:09:55,519 --> 00:09:56,560
這取決於你

208
00:09:56,560 --> 00:09:59,440
它接受 Keras 也接受

209
00:09:59,440 --> 00:10:00,959
這是三乘三的

210
00:10:00,959 --> 00:10:03,120
這表示的是

211
00:10:03,120 --> 00:10:05,839
然後激活函數是 ReLU

212
00:10:05,839 --> 00:10:07,760
我會將填充設定為相同

213
00:10:07,760 --> 00:10:10,720
這樣我的輸出大小會相同

214
00:10:10,720 --> 00:10:15,200
這裡的輸出與這個輸入 256 256 相同大小

215
00:10:15,200 --> 00:10:16,480
我不認為原始論文

216
00:10:16,480 --> 00:10:18,480
做到了這一點，因此尺寸有所變化

217
00:10:18,480 --> 00:10:21,040
從 572 變到 570 再變到 568

218
00:10:21,040 --> 00:10:23,440
這是我所想的

219
00:10:23,440 --> 00:10:26,079
在我們的情況下，我們就輸出吧

220
00:10:26,079 --> 00:10:27,120
填充等於相同

221
00:10:27,120 --> 00:10:29,519
這樣我們就不會丟失任何信息

222
00:10:29,519 --> 00:10:30,079
好的

223
00:10:30,079 --> 00:10:33,839
所以這些是兩個卷積層

224
00:10:33,839 --> 00:10:41,120
然後是最大池化，對吧？兩個卷積層之後是兩乘兩的最大池化

225
00:10:41,120 --> 00:10:44,800
兩兩池化的 2D 最大池化

226
00:10:44,800 --> 00:10:49,920
接下來的兩層卷積層 128 最大池化 1.28

227
00:10:49,920 --> 00:10:54,480
最大池化然後 256 最大池化

228
00:10:55,279 --> 00:10:56,079
好的

229
00:10:56,079 --> 00:10:59,920
所以這部分應該非常簡單，就是編碼器部分

230
00:10:59,920 --> 00:11:03,200
這是基數 1024

231
00:11:03,200 --> 00:11:04,480
就在那裡

232
00:11:04,480 --> 00:11:06,000
你用這個 1024 做什麼？

233
00:11:06,000 --> 00:11:08,240
現在我們需要反過來做

234
00:11:08,240 --> 00:11:08,640
好的

235
00:11:08,640 --> 00:11:12,160
所以以這個作為輸入，以 b1 作為輸入

236
00:11:12,160 --> 00:11:14,720
就在那裡，那是我的輸入

237
00:11:14,720 --> 00:11:18,079
好的，我想進行一次卷積操作

238
00:11:18,079 --> 00:11:21,839
對，我想進行一次卷積操作

239
00:11:21,839 --> 00:11:23,839
對不起

240
00:11:23,839 --> 00:11:26,959
然後連接連接

241
00:11:26,959 --> 00:11:28,160
什麼 s4

242
00:11:28,160 --> 00:11:28,800
和 d1

243
00:11:28,800 --> 00:11:29,600
s4 是什麼

244
00:11:29,600 --> 00:11:30,720
和 d1

245
00:11:30,720 --> 00:11:31,920
所以

246
00:11:31,920 --> 00:11:38,560
哦，我沒有處理好，我在串聯

247
00:11:38,560 --> 00:11:39,360
這個

248
00:11:39,360 --> 00:11:44,880
和這個在下一步中一起串聯

249
00:11:44,880 --> 00:11:47,120
兩個卷積運算

250
00:11:47,120 --> 00:11:50,160
戰鬥閥的連續性

251
00:11:50,160 --> 00:11:53,680
是的，那裡有 512

252
00:11:53,680 --> 00:11:54,160
然後來到

253
00:11:54,160 --> 00:11:57,760
另一個卷積操作

254
00:11:57,760 --> 00:11:59,040
好的，在 d1 上

255
00:11:59,040 --> 00:12:04,959
所以這裡的輸出是另一個卷積，你看到的是二乘二的卷積

256
00:12:04,959 --> 00:12:07,760
然後你將這兩個連接在一起，這正是

257
00:12:07,760 --> 00:12:09,440
我們在這裡所做的

258
00:12:09,440 --> 00:12:11,440
將這兩個連接起來

259
00:12:11,440 --> 00:12:14,959
然後再進行兩次卷積操作 con con

260
00:12:14,959 --> 00:12:16,720
所以這會重複

261
00:12:16,720 --> 00:12:17,519
一路上

262
00:12:17,519 --> 00:12:19,839
在你獲得輸出後

263
00:12:19,839 --> 00:12:25,040
所以我希望這可以澄清你對單位的任何疑問

264
00:12:25,040 --> 00:12:28,480
但至少為我們建立了一個良好的基礎，以便理解單位

265
00:12:28,480 --> 00:12:31,519
在接下來的幾個影片中，我們會逐步進行

266
00:12:31,519 --> 00:12:34,560
讓我們跳到程式碼，複製並貼上這個

267
00:12:34,560 --> 00:12:36,839
並查看 model.summary

268
00:12:36,839 --> 00:12:38,240
好的

269
00:12:38,240 --> 00:12:38,560
好的

270
00:12:38,560 --> 00:12:42,240
所以這就是我所做的，我只是導入了相關的

271
00:12:42,240 --> 00:12:45,519
這裡的庫，順便提一下，來自 keras.layers

272
00:12:45,519 --> 00:12:47,279
事實上，一個好的

273
00:12:47,279 --> 00:12:53,760
如果你正在使用 TensorFlow 2 或更高版本，建議使用 TensorFlow dot

274
00:12:53,760 --> 00:12:55,040
cash dot layers

275
00:12:55,040 --> 00:12:57,839
因為這可能是處理這種情況的最佳方法

276
00:12:57,839 --> 00:12:59,360
和你需要記住的一點是，如果你這麼做，你需要對所有 Keras 進行這樣的處理

277
00:12:59,360 --> 00:13:02,560
好的，你不能混合使用，否則會出現一些奇怪的錯誤

278
00:13:02,560 --> 00:13:05,200
好的，你不能混合使用，否則會出現一些奇怪的錯誤

279
00:13:05,200 --> 00:13:08,480
然後你會花一整天試圖弄明白那個錯誤的意思

280
00:13:08,480 --> 00:13:12,480
所以從 keras.layers

281
00:13:12,480 --> 00:13:15,120
我們得到的是 con 2d

282
00:13:15,120 --> 00:13:16,399
最大池化

283
00:13:16,399 --> 00:13:18,800
上採樣 連接 記住

284
00:13:18,800 --> 00:13:21,360
這些都是我們需要的東西，我還在導入

285
00:13:21,360 --> 00:13:23,760
2d 轉置以便替換

286
00:13:23,760 --> 00:13:25,200
用這個替換你的上採樣

287
00:13:25,200 --> 00:13:30,560
或者你知道，僅僅做一些測試批量正則化丟棄

288
00:13:30,560 --> 00:13:33,920
而且我甚至不確定我們是否在使用 Lambda

289
00:13:33,920 --> 00:13:35,600
但

290
00:13:35,600 --> 00:13:38,560
是的，我在那裡不使用 Lambda

291
00:13:38,560 --> 00:13:40,160
但

292
00:13:40,160 --> 00:13:45,360
我們來進口這些，我覺得我們需要連接

293
00:13:46,240 --> 00:13:49,519
目前執行時間可以不需要 GPU

294
00:13:49,519 --> 00:13:53,279
因為我們不會執行其他任務

295
00:13:53,279 --> 00:13:55,360
我的意思是我們不會訓練模型

296
00:13:55,360 --> 00:13:58,399
那麼我們接著來導入我們的庫

297
00:13:58,399 --> 00:14:01,120
然後這段代碼正是

298
00:14:01,120 --> 00:14:05,519
我在演示中展示給你的部分，對吧，我是說你有貢獻

299
00:14:05,519 --> 00:14:06,560
現在

300
00:14:06,560 --> 00:14:13,440
我更正一下，這不完全是在卷積層之間，我加了一個 dropout 層

301
00:14:13,440 --> 00:14:13,839
如果你

302
00:14:13,839 --> 00:14:16,800
如果你，整個重點是我想讓你看到的是

303
00:14:16,800 --> 00:14:22,560
是的，結構，原始結構顯示了你 con con 最大池化

304
00:14:22,560 --> 00:14:24,320
你可以添加批次正規化

305
00:14:24,320 --> 00:14:28,160
在這些欄位之間，您可以添加，您可以添加

306
00:14:28,160 --> 00:14:32,000
我討厭這個東西，您可以添加丟失值

307
00:14:32,000 --> 00:14:36,959
您知道，作為正則化項，因此您可以在這些之間添加一些

308
00:14:36,959 --> 00:14:39,760
但是整體結構是你有 con

309
00:14:39,760 --> 00:14:45,920
con 最大池化 con con 最大池化 我在中間添加了 dropout con con 最大池化

310
00:14:45,920 --> 00:14:51,760
和昂貴的路徑在這個例子中，除了僅僅執行卷積

311
00:14:51,760 --> 00:14:53,440
操作，我認為這很重要

312
00:14:53,440 --> 00:14:55,120
所以讓我切換回來

313
00:14:55,120 --> 00:15:00,480
所以我可以向你展示這裡，我們正在使用 con con 最大池化

314
00:15:00,480 --> 00:15:04,399
在我的例子中，在卷積層之間我加入了 dropout

315
00:15:04,399 --> 00:15:11,040
只是為了確保我的模型不會過擬合，這就是擴展路徑中我進行了卷積操作

316
00:15:11,040 --> 00:15:15,040
然後就在那裡進行了上採樣

317
00:15:15,040 --> 00:15:16,639
可以調整到那個大小

318
00:15:16,639 --> 00:15:18,480
我做了卷積運算

319
00:15:18,480 --> 00:15:22,160
將圖像上採樣到特定大小，然後進行卷積

320
00:15:22,160 --> 00:15:23,600
操作正確，所以連接

321
00:15:23,600 --> 00:15:28,399
然後當你做 2d 轉置時，卷積就會在那裡

322
00:15:28,399 --> 00:15:30,160
轉置是內建的

323
00:15:30,160 --> 00:15:32,959
是的，所以你不會在兩個不同的步驟中進行這個

324
00:15:32,959 --> 00:15:35,600
所以讓我們回到之前的內容

325
00:15:35,600 --> 00:15:36,480
那麼這樣

326
00:15:36,480 --> 00:15:39,040
所以這裡我有 convert2d 轉置

327
00:15:39,040 --> 00:15:40,480
然後我在進行串接

328
00:15:40,480 --> 00:15:42,320
哦，上帝，幫助

329
00:15:42,320 --> 00:15:43,680
然後我在串接

330
00:15:43,680 --> 00:15:45,839
然後另一個 con 2d

331
00:15:45,839 --> 00:15:48,240
然後另一位貢獻者也非常相似

332
00:15:48,240 --> 00:15:49,040
所以這就是

333
00:15:49,040 --> 00:15:49,839
我們是如何建立的

334
00:15:49,839 --> 00:15:51,600
然後我嘗試去

335
00:15:51,600 --> 00:15:53,440
印出 model dot summary

336
00:15:53,440 --> 00:15:55,600
讓我們繼續

337
00:15:55,600 --> 00:15:58,880
並將摘要列印出來，這就是我們的單元模型

338
00:15:58,880 --> 00:16:03,120
所以一旦你理解了結構，建立單元其實非常簡單

339
00:16:03,120 --> 00:16:08,160
實際上，你可以使用特定功能來定義這裡的單元

340
00:16:08,160 --> 00:16:10,399
如果你看到重複的內容

341
00:16:10,399 --> 00:16:13,600
連續性掉線造成的最大輪詢

342
00:16:13,600 --> 00:16:15,680
相反的掉線，相反的最大輪詢

343
00:16:15,680 --> 00:16:18,240
所以這整個東西是一個區塊

344
00:16:18,240 --> 00:16:21,519
這整個東西是另一個區塊，這是另一個區塊，對吧

345
00:16:21,519 --> 00:16:24,959
這樣你就可以僅為卷積區塊定義一個函數

346
00:16:24,959 --> 00:16:27,839
然後只需改變濾波器的數量，就是這樣

347
00:16:27,839 --> 00:16:31,839
因為這是唯一會改變的東西，所以如果你想要更乾淨的代碼

348
00:16:31,839 --> 00:16:34,560
這是一種更好的做事方式

349
00:16:34,560 --> 00:16:35,120
好的

350
00:16:35,120 --> 00:16:38,880
所以這是一個簡單的介紹

351
00:16:38,880 --> 00:16:45,279
一般來說，我一直承諾要談論上採樣與 2D 轉置卷積

352
00:16:45,279 --> 00:16:49,120
我保證我會在下一個影片中做到這一點

353
00:16:49,120 --> 00:16:52,399
我覺得你首先了解這點非常重要

354
00:16:52,399 --> 00:16:54,959
這樣你就知道我們所說的上採樣是什麼意思

355
00:16:54,959 --> 00:16:56,480
以及 2D 轉置

356
00:16:56,480 --> 00:17:00,800
然後討論這兩個，所以請繼續關注下一個視頻

357
00:17:00,800 --> 00:17:04,000
並訂閱這個頻道，謝謝

